// src/api/admin/content.ts
import type { NextApiRequest, NextApiResponse } from "next";
import { getServerSession } from "next-auth/next";
import { connectMongoose } from "@/lib/mongodb";
import { authOptions } from "../auth/[...nextauth]";
import Content from "@/lib/models/Content";
import Plan from "@/lib/models/Plan";

/**
 * Rota administrativa para CRUD de conte√∫dos.
 * M√©todos suportados: GET, POST, PUT, DELETE
 */
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  res.setHeader("Content-Type", "application/json");

  try {
    const session = await getServerSession(req, res, authOptions);

    // ‚úÖ Apenas administradores podem acessar
    if (!session?.user || session.user.role !== "admin") {
      return res.status(403).json({
        success: false,
        message: "Acesso negado. Permiss√µes de administrador necess√°rias.",
      });
    }

    // ‚úÖ Garante conex√£o ativa com o banco
    await connectMongoose();

    switch (req.method) {
      /**
       * üìò GET ‚Äî Listar todos os conte√∫dos
       */
      case "GET": {
        try {
          const contents = await Content.find({})
            .populate("planId", "name price")
            .sort({ createdAt: -1 });

          return res.status(200).json({
            success: true,
            message: "Conte√∫dos obtidos com sucesso.",
            data: contents,
          });
        } catch (error: any) {
          console.error("‚ùå Erro ao listar conte√∫dos:", error.message);
          return res.status(500).json({
            success: false,
            message: "Erro interno ao listar conte√∫dos.",
            error: error.message,
          });
        }
      }

      /**
       * üü¢ POST ‚Äî Criar novo conte√∫do
       */
      case "POST": {
        try {
          const { title, description, planId, restricted, thumbnailUrl } = req.body;

          if (!title || !description) {
            return res.status(400).json({
              success: false,
              message: "T√≠tulo e descri√ß√£o s√£o obrigat√≥rios.",
            });
          }

          // Se for conte√∫do restrito, precisa estar vinculado a um plano
          if (restricted && !planId) {
            return res.status(400).json({
              success: false,
              message: "Conte√∫dos restritos devem estar vinculados a um plano.",
            });
          }

          if (planId) {
            const planExists = await Plan.findById(planId);
            if (!planExists) {
              return res.status(404).json({
                success: false,
                message: "Plano vinculado n√£o encontrado.",
              });
            }
          }

          const newContent = await Content.create({
            title,
            description,
            planId: planId || null,
            restricted: restricted || false,
            thumbnailUrl: thumbnailUrl || "",
            views: 0,
            lastViewedAt: null,
          });

          console.log("üì¶ Novo conte√∫do criado:", {
            title,
            planId,
            restricted,
          });

          return res.status(201).json({
            success: true,
            message: "Conte√∫do criado com sucesso!",
            data: newContent,
          });
        } catch (error: any) {
          console.error("‚ùå Erro ao criar conte√∫do:", error.message);
          return res.status(500).json({
            success: false,
            message: "Erro interno ao criar conte√∫do.",
            error: error.message,
          });
        }
      }

      /**
       * üü° PUT ‚Äî Atualizar conte√∫do existente
       */
      case "PUT": {
        try {
          const { id, ...updateData } = req.body;

          if (!id) {
            return res.status(400).json({
              success: false,
              message: "O ID do conte√∫do √© obrigat√≥rio para atualiza√ß√£o.",
            });
          }

          const updatedContent = await Content.findByIdAndUpdate(id, updateData, {
            new: true,
            runValidators: true,
          });

          if (!updatedContent) {
            return res.status(404).json({
              success: false,
              message: "Conte√∫do n√£o encontrado.",
            });
          }

          console.log("‚úèÔ∏è Conte√∫do atualizado:", { id });

          return res.status(200).json({
            success: true,
            message: "Conte√∫do atualizado com sucesso!",
            data: updatedContent,
          });
        } catch (error: any) {
          console.error("‚ùå Erro ao atualizar conte√∫do:", error.message);
          return res.status(500).json({
            success: false,
            message: "Erro interno ao atualizar conte√∫do.",
            error: error.message,
          });
        }
      }

      /**
       * üî¥ DELETE ‚Äî Excluir conte√∫do
       */
      case "DELETE": {
        try {
          const { id } = req.query;

          if (!id || typeof id !== "string") {
            return res.status(400).json({
              success: false,
              message: "O ID do conte√∫do √© obrigat√≥rio para exclus√£o.",
            });
          }

          const deletedContent = await Content.findByIdAndDelete(id);

          if (!deletedContent) {
            return res.status(404).json({
              success: false,
              message: "Conte√∫do n√£o encontrado.",
            });
          }

          console.log("üóëÔ∏è Conte√∫do exclu√≠do:", { id });

          return res.status(200).json({
            success: true,
            message: "Conte√∫do exclu√≠do com sucesso.",
            data: deletedContent,
          });
        } catch (error: any) {
          console.error("‚ùå Erro ao excluir conte√∫do:", error.message);
          return res.status(500).json({
            success: false,
            message: "Erro interno ao excluir conte√∫do.",
            error: error.message,
          });
        }
      }

      /**
       * üö´ M√âTODO INV√ÅLIDO
       */
      default:
        return res.status(405).json({
          success: false,
          message: "M√©todo n√£o permitido.",
        });
    }
  } catch (error: any) {
    console.error("‚ùå Erro global na rota admin/content:", error.message);
    return res.status(500).json({
      success: false,
      message: "Erro interno do servidor.",
      error: error.message,
    });
  }
}
